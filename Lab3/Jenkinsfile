pipeline {
    agent any

    stages {
        stage('Check scm') {
            agent any
            steps {
                checkout scm
            }
        }

        stage('Build') {
            steps {
                echo "Building...${BUILD_NUMBER}"
                echo "Building completed"

                // Додані команди для будівництва та тестування
                sh 'docker build -t my-app .'
                sh 'docker run my-app test'
            }
        }

        stage('Test') {
            agent { docker { image 'alpine' args '-u="root"' } }
            steps {
                sh 'apk add --udate python3 py-pip'
                sh 'pip install xmlrunner'
                sh 'python3 test_good.py'
            }
            post {
                always {
                    junit 'test-reports/*.xml'
                }
                success {
                    echo "Application tested successfully completed"
                }
                failure {
                    echo "Something went wrong!"
                }
            }
        }

        stage('Build Docker Image Info') {
            steps {
                script {
                    // Отримати хеш коміту для тегу образу
                    def commitHash = sh(script: 'git rev-parse --short HEAD', returnStdout: true).trim()
                    // Створити тег образу
                    def imageTag = "my-app:${commitHash}"
                    // Записати тег образу у файл
                    writeFile file: 'docker-image-tag', text: imageTag
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    def imageTag = readFile 'docker-image-tag'
                    // Створити Docker образ та позначити його тегом
                    sh "docker build -t ${imageTag} ."
                }
            }
        }

        stage('Docker Hub Login') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'docker-hub-credentials', passwordVariable: 'DOCKER_HUB_PASSWORD', usernameVariable: 'DOCKER_HUB_USERNAME')]) {
                        sh "docker login -u ${DOCKER_HUB_USERNAME} -p ${DOCKER_HUB_PASSWORD}"
                    }
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                script {
                    def imageTag = readFile 'docker-image-tag'
                    // Послати Docker образ на Docker Hub
                    sh "docker push ${imageTag}"
                }
            }
        }
    }
    
    post {
        always {
            junit 'test-reports/*.xml'
        }
        success {
            echo "Application tested successfully completed"
        }
        failure {
            echo "Something went wrong!"
        }
    }
}
